{"version":3,"file":"js/384.c09b8185.js","mappings":"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","sources":["webpack://bomb_calorimetry_v2/./src/components/CalorimetryPage.vue","webpack://bomb_calorimetry_v2/./src/components/CalorimetryPage.vue?0081","webpack://bomb_calorimetry_v2/./src/views/Calorimetry.vue?aa43","webpack://bomb_calorimetry_v2/./src/views/Calorimetry.vue"],"sourcesContent":["<template>\n  <v-container class=\"fill-height\">\n    <v-responsive class=\"text-center fill-height\">\n      <v-alert\n        v-if=\"\n          exp.sampleWgt < 0.2 ||\n          exp.sampleWgt > 2 ||\n          exp.itWater < 24 ||\n          exp.itWater > 30\n        \"\n        border=\"start\"\n        variant=\"tonal\"\n        color=\"red\"\n      >\n        <div v-if=\"exp.sampleWgt < 0.2 || exp.sampleWgt > 2\">\n          <strong>Warning!</strong> Sample weight must be between 0.2 and 2\n          grams.\n        </div>\n        <div v-if=\"exp.itWater < 24 || exp.itWater > 30\">\n          <strong>Warning!</strong> Water temperatuer be between 24 and 30 °C.\n        </div>\n      </v-alert>\n\n      <h2>Run the simulation</h2>\n      <h3 id=\"sample_name\"></h3>\n\n      <v-row align=\"center\" justify=\"center\" style=\"margin-top: 20px\">\n        <div id=\"graph\" style=\"width: 550px; height: 300px\"></div>\n        <v-table>\n          <tbody>\n            <tr v-for=\"item in tableData\" :key=\"item.name\">\n              <td>{{ item.name }}</td>\n              <td style=\"width: 50%\">\n                <v-text-field\n                  v-if=\"item.name === 'Sample Weight'\"\n                  v-model=\"exp.sampleWgt\"\n                  hide-details\n                  single-line\n                  type=\"number\"\n                  :disabled=\"ran != 0 || $store.getters.getSample < 0\"\n                >\n                  <template v-slot:append>g</template>\n                </v-text-field>\n                <v-text-field\n                  v-else-if=\"item.name === 'Water Temp'\"\n                  v-model=\"exp.itWater\"\n                  hide-details\n                  single-line\n                  type=\"number\"\n                  :disabled=\"ran != 0 || $store.getters.getSample < 0\"\n                >\n                  <template v-slot:append>°C</template>\n                </v-text-field>\n                <span v-else>\n                  {{\n                    item.value +\n                    (() => {\n                      if (item.name.includes(\"Temp\")) return \" °C\";\n                      else return \" g\";\n                    })()\n                  }}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </v-table>\n      </v-row>\n      <v-row align=\"center\" justify=\"center\">\n        <v-spacer />\n        <v-btn\n          color=\"red\"\n          @click=\"experiment\"\n          :disabled=\"\n            ran != 0 ||\n            $store.getters.getSample < 0 ||\n            exp.sampleWgt < 0.2 ||\n            exp.sampleWgt > 2 ||\n            exp.itWater < 24 ||\n            exp.itWater > 30\n          \"\n          >Ignite</v-btn\n        >\n        <v-spacer />\n        <v-btn\n          color=\"green\"\n          @click=\"download\"\n          :disabled=\"ran != 1 || $store.getters.getSample < 0\"\n        >\n          Download Data\n          <!-- <p v-if=\"ran == 1\">Download Data</p> -->\n          <!-- <v-progress-circular\n            v-else\n            color=\"purple\"\n            indeterminate\n          ></v-progress-circular> -->\n        </v-btn>\n\n        <v-spacer />\n        <v-dialog\n          v-model=\"dialog\"\n          fullscreen\n          :scrim=\"false\"\n          transition=\"dialog-bottom-transition\"\n        >\n          <template v-slot:activator=\"{ props }\">\n            <v-btn\n              v-bind=\"props\"\n              color=\"blue\"\n              :disabled=\"ran < 1 || $store.getters.getSample < 0\"\n              >View Results</v-btn\n            >\n          </template>\n          <v-card>\n            <v-toolbar dark color=\"primary\">\n              <v-btn icon dark @click=\"dialog = false\">\n                <v-icon>mdi-close</v-icon>\n              </v-btn>\n              <v-toolbar-title>Test Results</v-toolbar-title>\n            </v-toolbar>\n\n            <v-row style=\"margin: 10px 20%\">\n              <v-textarea v-model=\"data\" auto-grow readonly> </v-textarea>\n              <v-col fluid>\n                <h2>{{ samples[$store.getters.getSample].sName }}</h2>\n                <h3>{{ samples[$store.getters.getSample].sFormula }}</h3>\n                <v-table>\n                  <tbody>\n                    <tr>\n                      <td>Molecular Weight</td>\n                      <td>\n                        {{ samples[$store.getters.getSample].sM + \" g/mol\" }}\n                      </td>\n                    </tr>\n                    <tr v-for=\"item in tableData\" :key=\"item.name\">\n                      <td>{{ item.name }}</td>\n                      <td>\n                        {{\n                          item.value +\n                          (() => {\n                            if (item.name.includes(\"Temp\")) return \" °C\";\n                            else return \" g\";\n                          })()\n                        }}\n                      </td>\n                    </tr>\n                  </tbody>\n                </v-table>\n\n                <!-- <h4>T initial: {{ numberOrString(T.Ti) }}°C</h4> -->\n                <!-- <h4>T final: {{ numberOrString(T.Tf) }}°C</h4> -->\n              </v-col>\n            </v-row>\n          </v-card>\n        </v-dialog>\n        <v-spacer />\n      </v-row>\n    </v-responsive>\n  </v-container>\n</template>\n\n<script lang=\"js\">\nimport { Samples } from \"@/ts/samples\"\nimport { Experiment } from \"@/ts/experiment\"\nimport Plotly from 'plotly.js-dist'\n\nlet GRAPH = null;\n\nexport default {\n  data() {\n    return {\n      samples: Samples,\n      output: {},\n      exp: {},\n      data: \"\",\n      ran: 0,\n      tableData: [],\n      dialog: false,\n      T: { Ti: \"?\", Tf: \"?\" }\n    }\n  },\n  mounted() {\n    // set sample name\n    const sampleId = this.$store.getters.getSample;\n    const sample_name = document.getElementById(\"sample_name\");\n    if (sampleId >= 0) {\n      sample_name.textContent = Samples[sampleId].sName;\n    } else {\n      sample_name.textContent = \"No Sample Selected\";\n    }\n\n    const calorimeter_code = this.$store.getters.getCalorimeterCode;\n    const cc_a = Number(calorimeter_code[0]);\n    const cc_b = Number(calorimeter_code[1]);\n    const cc_c = Number(calorimeter_code[2]);\n    const cc_d = Number(calorimeter_code[3]);\n    this.exp = new Experiment(sampleId, cc_a, cc_b, cc_c, cc_d);\n    this.tableData = [\n      { name: 'Sample Weight', value: Math.round(this.exp.sampleWgt*1000) / 1000 },\n      { name: 'Water Temp', value: Math.round(this.exp.tWater*1000) / 1000 },\n      { name: 'Room Temp', value: Math.round(this.exp.tRoom*1000) / 1000 },\n      { name: 'Wire Before', value: Math.round(this.exp.wireWgt*1000) / 1000 },\n      { name: 'Wire After', value: '?'},\n    ]\n\n    // setup Plotly\n    GRAPH = document.getElementById('graph');\n    Plotly.newPlot(\n      GRAPH,\n      [{\n        x: [],\n        y: []\n      }],\n      {\n        // margin: { t: 0 },\n        xaxis: {\n          title: 'Time (min)'\n        },\n        yaxis: {\n          title: 'Temperature (°C)'\n        }\n      }\n    );\n\n  },\n  methods: {\n    experiment() {\n      const sampleId = this.$store.getters.getSample;\n      if (sampleId >= 0) {\n        let output = this.exp.experiment();\n\n        this.data = this.exp.output;\n        this.output = output;\n\n        // Animate scatter plot\n        let f_dist = 25;\n\n        // for (let i = 0; i < this.exp.g_X.length; i++) {\n        for (let i = 0; i < this.exp.g_X.length; i++) {\n          let delay = 6*20*f_dist + i * f_dist;\n          if (i < 6) {\n            delay = i * 20*f_dist;\n          } else if (i >= this.exp.g_X.length - 7) {\n            delay = 6*20*f_dist + (this.exp.g_X.length - 7) * f_dist + (i - this.exp.g_X.length + 7) * 20*f_dist;\n          }\n\n          setTimeout(() => {\n            Plotly.newPlot(\n              GRAPH,\n              {\n                data: [{\n                  x: this.exp.g_X.slice(0, i),\n                  y: this.exp.g_Y.slice(0, i),\n                  mode: 'markers',\n                }]\n              },\n              {\n                xaxis: {\n                  title: 'Time (min)'\n                },\n                yaxis: {\n                  title: 'Temperature (°C)'\n                }\n              }\n            );\n\n            if (i == this.exp.g_X.length - 1) {\n              this.ran = 1;\n            }\n          }, delay);\n        }\n\n        this.tableData[4].value = Math.round(this.exp.wireAfter*1000) / 1000;\n      }\n\n      // Finalize tableData\n      this.tableData[0].value = Math.round(this.exp.sampleWgt*1000) / 1000;\n      this.tableData[1].value = Math.round(this.exp.itWater*1000) / 1000;\n    },\n    extrapolate() {\n      let l1_x = [];\n      let l1_y = [];\n      let l2_x = [];\n      let l2_y = [];\n\n      // Compute lines\n      let aint = this.output.aint;\n      let aslope = this.output.aslope;\n      let bint = this.output.bint;\n      let bslope = this.output.bslope;\n\n      let tt = 0;\n      let i = 1;\n      for (i == 1; i < 20; i++) {\n        tt = aint + aslope * (0.125 + i / 2);\n        l1_x.push(0.5 * i);\n        l1_y.push(tt);\n      }\n\n      i = 10;\n      for (i == 10; i < 36; i++) {\n        tt = bint + bslope * (0.125 + i / 2);\n        l2_x.push(0.5 * i);\n        l2_y.push(tt);\n      }\n\n      // Compute initial Ti and Tf\n      let x0 = 7;\n      let y0 = aint + aslope * (0.125 + x0);\n      let y1 = bint + bslope * (0.125 + x0);\n      this.T.Ti = y0;\n      this.T.Tf = y1;\n\n      // Setup vertical line between Ti and Tf\n      let verticalLine = {\n        type: 'line',\n        x0: x0,\n        y0: y0,\n        x1: x0,\n        y1: y1,\n        line: {\n          color: 'grey',\n          width: 1.5,\n          dash: 'dot'\n        }\n      };\n\n      // Setup layout\n      let layout = {\n        margin: { t: 0 },\n        hovermode: 'x',\n        xaxis: {\n          title: 'Time (min)',\n          spikemode: 'across'\n        },\n        yaxis: {\n          title: 'Temperature (°C)'\n        },\n        shapes: [verticalLine],\n        annotations: [\n          {\n            x: x0,\n            y: y0,\n            xref: 'x',\n            yref: 'y',\n            text: 'T initial = ' + Math.round(y0*1000) / 1000,\n            showarrow: true,\n            arrowhead: 7,\n            ax: 10,\n            ay: 20\n          },\n          {\n            x: x0,\n            y: y1,\n            xref: 'x',\n            yref: 'y',\n            text: 'T final = ' + Math.round(y1*1000) / 1000,\n            showarrow: true,\n            arrowhead: 7,\n            ax: -10,\n            ay: -20\n          }\n        ]\n      };\n\n      // Finalize data with extrapolated lines\n      let data = [\n        {\n          x: this.exp.g_X,\n          y: this.exp.g_Y,\n          name: 'Data',\n          mode: 'markers',\n        },\n        {\n          x: l1_x,\n          y: l1_y,\n          name: '',\n          mode: 'lines',\n          line: {\n            dash: 'dash'\n          }\n        },\n        {\n          x: l2_x,\n          y: l2_y,\n          name: '',\n          mode: 'lines',\n          line: {\n            dash: 'dash'\n          }\n        }\n      ];\n\n      // Update Plotly\n      Plotly.react(GRAPH, data, layout);\n\n      // Necessary beceause the Plotly click event captures a different `this` context\n      // eslint-disable-next-line\n      const obj = this;\n\n      // Graph click events\n      GRAPH.on('plotly_click', function(data){\n        const x = data.points[0].x;\n        const y1 = aint + aslope * (0.125 + x);\n        const y2 = bint + bslope * (0.125 + x);\n\n        verticalLine.x0 = x;\n        verticalLine.x1 = x;\n        verticalLine.y0 = y1;\n        verticalLine.y1 = y2;\n        obj.T.Ti = y1;\n        obj.T.Tf = y2;\n\n        layout.shapes = [verticalLine];\n        layout.annotations = [\n          {\n            x: x,\n            y: y1,\n            xref: 'x',\n            yref: 'y',\n            text: 'T initial = ' + Math.round(y1*1000) / 1000,\n            showarrow: true,\n            arrowhead: 7,\n            ax: 10,\n            ay: 20\n          },\n          {\n            x: x,\n            y: y2,\n            xref: 'x',\n            yref: 'y',\n            text: 'T final = ' + Math.round(y2*1000) / 1000,\n            showarrow: true,\n            arrowhead: 7,\n            ax: -10,\n            ay: -20\n          }\n        ]\n\n        Plotly.relayout(GRAPH, layout);\n      });\n\n      this.ran = 2;\n    },\n    numberOrString(x) {\n      if (typeof x === 'string' || x instanceof String) {\n        return x;\n      } else {\n        return Math.round(x*1000) / 1000;\n      }\n    },\n    download() {\n      const element = document.createElement('a');\n\n      // Add header information\n      let dat = \"\";\n      dat += \"Calorimeter Code,\" + this.$store.getters.getCalorimeterCode + \"\\n\";\n      dat += \"Sample Name,\" + Samples[this.$store.getters.getSample].sName + \"\\n\";\n      dat += \"Formula,\" + Samples[this.$store.getters.getSample].sFormula + \"\\n\";\n      dat += \"Molecular Weight,\" + Math.round(this.samples[this.$store.getters.getSample].sM * 1000) / 1000 + \" g/mol\\n\";\n      dat += \"Sample Weight,\" + Math.round(this.exp.sampleWgt * 1000) / 1000 + \" g\\n\";\n      dat += \"Water Temp,\" + Math.round(this.exp.itWater * 1000) / 1000 + \" deg C\\n\";\n      dat += \"Room Temp,\" + Math.round(this.exp.tRoom * 1000) / 1000 + \" deg C\\n\";\n      dat += \"Wire Before,\" + Math.round(this.exp.wireWgt * 1000) / 1000 + \" g\\n\";\n      dat += \"Wire After,\" + Math.round(this.exp.wireAfter * 1000) / 1000 + \" g\\n\";\n\n      dat += this.data;\n\n      const file = new Blob([dat], {type: 'text/plain'});\n      element.href = URL.createObjectURL(file);\n\n      const sampleId = this.$store.getters.getSample;\n      let name = Samples[sampleId].sName;\n      name = name.replace(/ /g, '_');\n      name = name.toLowerCase();\n      element.download = 'data_' + name + '_cc' + this.$store.getters.getCalorimeterCode + '.csv';\n      document.body.appendChild(element); // Required for this to work in FireFox\n      element.click();\n    }\n  },\n};\n</script>\n","import { render } from \"./CalorimetryPage.vue?vue&type=template&id=ebbb14e2\"\nimport script from \"./CalorimetryPage.vue?vue&type=script&lang=js\"\nexport * from \"./CalorimetryPage.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/.pnpm/vue-loader@17.2.2_@vue+compiler-sfc@3.3.4_vue@3.3.4_webpack@5.88.2/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport CalorimetryPage from \"@/components/CalorimetryPage.vue\";\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Calorimetry',\n  setup(__props) {\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(CalorimetryPage))\n}\n}\n\n})","import script from \"./Calorimetry.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Calorimetry.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_createElementVNode","id","style","_createBlock","_component_v_container","class","_createVNode","_component_v_responsive","$data","exp","sampleWgt","itWater","_component_v_alert","border","variant","color","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_component_v_row","align","justify","_hoisted_7","_component_v_table","_Fragment","_renderList","tableData","item","key","name","_toDisplayString","_hoisted_8","_component_v_text_field","$event","type","disabled","ran","_ctx","$store","getters","getSample","append","_withCtx","_hoisted_9","value","includes","_component_v_spacer","_component_v_btn","onClick","$options","experiment","download","_component_v_dialog","dialog","fullscreen","scrim","transition","activator","props","_mergeProps","_component_v_card","_component_v_toolbar","dark","icon","_cache","_component_v_icon","_component_v_toolbar_title","_component_v_textarea","data","readonly","_component_v_col","fluid","samples","sName","sFormula","_hoisted_10","sM","GRAPH","Samples","output","T","Ti","Tf","mounted","sampleId","this","sample_name","document","getElementById","textContent","calorimeter_code","getCalorimeterCode","cc_a","Number","cc_b","cc_c","cc_d","Experiment","Math","round","tWater","tRoom","wireWgt","Plotly","x","y","xaxis","title","yaxis","methods","f_dist","i","g_X","length","delay","setTimeout","slice","g_Y","mode","wireAfter","extrapolate","l1_x","l1_y","l2_x","l2_y","aint","aslope","bint","bslope","tt","push","x0","y0","y1","verticalLine","x1","line","width","dash","layout","margin","t","hovermode","spikemode","shapes","annotations","xref","yref","text","showarrow","arrowhead","ax","ay","obj","on","points","y2","numberOrString","String","element","createElement","dat","file","Blob","href","URL","createObjectURL","replace","toLowerCase","body","appendChild","click","__exports__","render","_defineComponent","__name","setup","__props","_openBlock","CalorimetryPage"],"sourceRoot":""}